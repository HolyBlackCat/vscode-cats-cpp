keyword
    .control
        .multiline
            .branch
                if
                else
                switch
            .loop
                for
                while
                do
            .ex
                try
                catch
        .oneline
            .goto
                goto
            .loop
                break
                continue
            .return
                return
            .throw
                throw
    .operator
        .word
            and
            and_eq
            bitand
            bitor
            compl
            not
            not_eq
            or
            or_eq
            xor
            xor_eq
        .symbol
            .scope
                ::
            .member
                .
                ->
            .other
                ++
                --
                !
                &&
                ||
                ~
                &
                ^
                |
                <<
                >>
                *
                /
                %
                +
                -
                <=>
                <
                <=
                >
                >=
                ==
                !=
                =
            .ternary
                ?
                :
            .comma
                ,
            .bracket
                .round
                    (
                    )
                .curly
                    {
                    }
                .square
                    [
                    ]
    .other
        .memory
            new
            delete
        .co
            co_await
            co_return
            co_yield
        .type_property
            alignof
            sizeof
        .typeid
            typeid
        .decltype
            decltype
        .cast
            .const
                const_cast
            .dyn
                dynamic_cast
            .re
                reinterpret_cast
            .static
                static_cast
        .label
            .control
                case
                default
            .access
                private
                protected
                public
        .special
            .asm
                asm
            .typename
                typename
            .noexcept
                noexcept
            .requires
                requires
            .friend
                friend
            .static_assert
                static_assert
        .reserved
            register

storage
    .type
        .type
            .auto
                auto
            .void
                void
            .sign
                signed
                unsigned
            .other
                double
                float
                short
                int
                long
                char
                char8_t
                char16_t
                char32_t
                wchar_t
                bool
        .category
            enum
            namespace
            operator
            class
            union
            struct
            using
            typedef
            concept
            template
    .modifier
        .cv
			.const
				const
			.volatile
				volatile
        .storage
            thread_local
            extern
            static
            export
        .const
            .expr
                constexpr
            .eval
                consteval
            .init
                constinit
        .other
			.virt
				virtual
			.explicit
				explicit
			.inline
				inline
			.mutable
				mutable
			.alignas
				alignas

constant.language
    .bool
        false
        true
    .this
        this
    .nullptr
        nullptr

------------- Context-sensitive -------------

keyword.other
    .override
        override
    .final
        final
    .import
        import
    .module
        module

------------- Attributes -------------
[[
storage.modifier
    .attrib
        .noret
            noreturn
        .carries_dep
            carries_dependency
        .depr
            deprecated
        .fall
            fallthrough
        .use
            nodiscard
        .unused
            maybe_unused
        .expr
            likely
            unlikely
        .no_uniq_addr
            no_unique_address
]]

------------- Preprocessor -------------

keyword.other.pp
    .dir
        #if
        #elif
        #else
        #endif
        #ifdef
        #ifndef
        #define
        #undef
        #include
        #line
        #error
        #pragma
    .dir_op
        defined
        __has_include
        __has_cpp_attribute
    .macro_op
        __VA_ARGS__
        __VA_OPT__
    .func
        _Pragma
    .const
        .mandatory
            __cplusplus
            __STDC_HOSTED__
            __FILE__
            __LINE__
            __DATE__
            __TIME__
            __STDCPP_DEFAULT_NEW_ALIGNMENT__
            __STDCPP_FLOAT16_T__
            __STDCPP_FLOAT32_T__
            __STDCPP_FLOAT64_T__
            __STDCPP_FLOAT128_T__
            __STDCPP_BFLOAT16_T__
        .optional
            __STDC__
            __STDC_VERSION__
            __STDC_ISO_10646__
            __STDC_MB_MIGHT_NEQ_WC__
            __STDCPP_THREADS__
            __cpp_[A-Za-z0-9_]* (__cpp_whatever)
            __STDCPP_STRICT_POINTER_SAFETY__ // Removed from the standard?

//fff \
fff

// fff
fff

#if       1 == 1##2 __has_include
#elif     1 == 1##2
#else
#endif
#ifdef    FOO
#ifndef   FOO
#define
#define   FOO foo 42
#define   FOO 123  \
fff
fff
#define   FOO(a,b,c) 123#45
#define   FOO(a,b,c) 123##45
#define   FOO(a,b,c) 123###45 // Wrong number of `#`s.
#undef
#include "ff"
#include <ff>
#include
#line
#error
#pragma once

#elifdef
#elifndef

// Message is highlighted as if it was a raw string.
#error foo
// Quoted string has no special highlighting. GCC doesn't like unmatched quotes here, but is fine with no quotes at all.
// All other compilers don't care whatsoever. Notably, no compiler seems to care about unmatched `'` apostrophes.
#error "foo"

#invalid

const_cast // A keyword to compare colors.
#if defined // Error.
#if defined FOO
__has_include __has_cpp_attribute // Not highlighted on their own.
#if __has_include || __has_cpp_attribute // Not even like this
#if __has_include() || __has_cpp_attribute() // This is ok though.
#if defined(__has_include) || defined(__has_cpp_attribute) // Different highlighting here.
maybe_unused // Not highlighted.
#if __has_cpp_attribute(maybe_unused) // Highlighted.
#if __has_include(maybe_unused) // Not here.
#if __has_include(<foo>) // Highlighted!
#if __has_include("foo") // This too!
#if __has_cpp_attribute("foo") // Not this though.
#if <foo> // Neither this.
#if "foo" // Not this.

#ifdef __DATE__
#ifdef __has_include
#ifdef __has_cpp_attribute
#if 42 + 43 + 12.3f // Numbers are still highlighted, but not floating-point ones though (note the black dot).
#if
#if defined __has_include
#if defined __has_cpp_attribute
#if defined(FOO)
#if defined ( FOO )
#if defined(__has_include)
#if defined(__has_cpp_attribute)
#if defined ( __has_cpp_attribute )

// Broken by newline.
#if defined
    __has_cpp_attribute
// Incorrectly not highlighted, but ok.
#if defined \
    __has_cpp_attribute
// Also broken by newline.
#if defined ( __has_cpp_attribute
    __has_cpp_attribute )
// Incorrectly not highlighted, but ok.
#if defined ( __has_cpp_attribute \
    __has_cpp_attribute )

#pragma once

#include <iostream> // 123
#include "iostream" // 123
#invalid foo // 123

// This shouldn't highlight as include.
#if BETTER_INIT_CXX_STANDARD < 17 || (defined(_MSC_VER) && BETTER_INIT_CXX_STANDARD >= 20)

f123foo
f0b010101foo
f0123foo
f0x123foo
f1e23foo
f1e+23foo
f1e-23foo
f10.e23foo
f10.e+23foo
f10.e-23foo
f.10e23foo
f10.10e23foo
f0x1p23foo
f0x1p+23foo
f0x1p-23foo
f0x10.p23foo
f0x10.p+23foo
f0x10.p-23foo
f0x.10p23foo
f0x10.10p23foo

1
1.0
1.0f
1.f


112233foo
0b010101foo
0112233foo
0x112233foo
102030e405060foo
102030e+405060foo
102030e-405060foo
102030.e405060foo
102030.e+405060foo
102030.e-405060foo
.102030e405060foo
102030.102030e405060foo
0x10Ff30p405060foo
0x10Ff30p+405060foo
0x10Ff30p-405060foo
0x10fF30.p405060foo
0x10fF30.p+405060foo
0x10fF30.p-405060foo
0x.10fF30p405060foo
0x10fF30.10fF30p405060foo

11'22'33foo
011'22'33foo
0'11'22'33foo
0x11'22'33foo
10'20'30e40'50'60foo
10'20'30e+40'50'60foo
10'20'30e-40'50'60foo
10'20'30.e40'50'60foo
10'20'30.e+40'50'60foo
10'20'30.e-40'50'60foo
.10'20'30e40'50'60foo
10'20'30.10'20'30e40'50'60foo
0x10'Ff'30p40'50'60foo
0x10'Ff'30p+40'50'60foo
0x10'Ff'30p-40'50'60foo
0x10'fF'30.p40'50'60foo
0x10'fF'30.p+40'50'60foo
0x10'fF'30.p-40'50'60foo
0x.10'fF'30p40'50'60foo
0x10'fF'30.10'fF'30p40'50'60foo

12345km
12345sec
12345_km
12345_sec

float alpha = 1.f;

if (x == 1.f)
{...}
if (x == 1.0f)
{...}
if (x == 0x123LLU)
{...}

"foo\nfoo"

"foo\0foo"
"foo\01foo"
"foo\012foo"
"foo\0123foo" // 3 octal chars max.

"foo\x"
"foo\x1"
"foo\x12"
"foo\x123" // Not displaying an error here, since longer sequences could be valid for wide strings, and I can't be bothered to detect string width. (Which is impossible with non-portable size of wchar_t anyway?)
"foo\x1234"

"foo\u1x"
"foo\u12x"
"foo\u123x"
"foo\u1234x"
"foo\u12345x"
"foo\u123456x"

"foo\Ux"
"foo\U1234567x"
"foo\U12345678x"
"foo\U123456789x"

"foo\o{}9x"
"foo\o{1}9x"
"foo\o{1234567}9x"
"foo\o{12345678}9x"
"foo\o{12349}9x"

"foo\x{}9x"
"foo\x{1}9x"
"foo\x{1Ffa09A}9x"
"foo\x{1Ffa09Ax}9x"

"foo\u{}9x"
"foo\u{1}9x"
"foo\u{1Ffa09A}9x"
"foo\u{1Ffa09Ax}9x"

"foo\N9x"
"foo\N{hello world}foo"
"foo\N{}foo"


'123'foo
"123"foo

"foo"_format()

  'fdsa'_foo f
 L'fdsa'_foo f
u8'fdsa'_foo f
 u'fdsa'_foo f
 U'fdsa'_foo f
xx'fdsa'_foo f

  "fdsa"_foo f
 L"fdsa"_foo f
u8"fdsa"_foo f
 u"fdsa"_foo f
 U"fdsa"_foo f
xx"fdsa"_foo f

  R"(fdsa)"_x f
 LR"(fdsa)"_x f
u8R"(fdsa)"_x f
 uR"(fdsa)"_x f
 UR"(fdsa)"_x f
xxR"(fdsa)"_x f

  'fd\
sa'
 L'fd\
sa'
u8'fd\
sa'
 u'fd\
sa'
 U'fd\
sa'
xx'fd\
sa'

  "fd\
sa"
 L"fd\
sa"
u8"fd\
sa"
 u"fd\
sa"
 U"fd\
sa"
xx"fd\
sa"

'fasdf
xx
"fasdf
xx
'fasdf\
xx
yy
"fasdf\
xx
yy

R"f(
    fasdf
)f"
xx
LR"f(
    fasdf
)f"
xx
u8R"f(
    fasdf
)f"
xx
uR"f(
    fasdf
)f"
xx
UR"f(
    fasdf
)f"
xx
